```julia, echo = false, results = "hidden"
using DrWatson
@quickactivate "PhenoEx"
```

```julia, echo = false, results = "hidden"
using CSV
using DrWatson
using DataFrames
using FunSQL: From, Get, Group, render
using LibPQ
using MentalHealthEquity
```

# Details

**Author:** Jacob Scott Zelko

**Date:** 2022-03-28

**Summary:** 

# Introduction

```julia, echo = false, results = "hidden"

schema_info = introspect(conn; schema = :synpuf5)

for (idx, tbl) in enumerate(propertynames(schema_info) |> collect)
	@eval $(Symbol(tbl)) = schema_info[$(idx)]
end
```

```julia, echo = false, results = "hidden"
inpatient_codes = get_atlas_concept_set(
           read(datadir("exp_raw", "queries", "inpatient_cohort.json"), String),
           )

outpatient_codes = get_atlas_concept_set(read(datadir("exp_raw", "queries", "outpatient_cohort.json"), String))

visit_codes = [inpatient_codes, outpatient_codes, nothing]
```

```julia, echo = false, results = "hidden"
bipolar_df = CSV.read(
    datadir("exp_raw", "concept_sets", "bipolar_disorder_concept_set.csv"),
    DataFrame,
)

suicidality_df =
    CSV.read(datadir("exp_raw", "concept_sets", "suicidality_concept_set.csv"), DataFrame)

depression_df =
    CSV.read(datadir("exp_raw", "concept_sets", "depression_concept_set.csv"), DataFrame)

condition_codes =
    [bipolar_df.CONCEPT_ID, depression_df.CONCEPT_ID, suicidality_df.CONCEPT_ID, nothing]
```

```julia, echo = false, results = "hidden"
races =
    From(person) |>
    Group(Get.race_concept_id) |>
    render |>
    x -> LibPQ.execute(conn, x) |> DataFrame

race_codes = vcat(races.race_concept_id, nothing)
```

```julia, echo = false, results = "hidden"
age_groups = [
    [0, 9],
    [10, 19],
    [20, 29],
    [30, 39],
    [40, 49],
    [50, 59],
    [60, 69],
    [70, 79],
    [80, 89],
    nothing,
]
```

```julia, echo = false, results = "hidden"
gender_codes = [8507, 8532, nothing]
```

```julia, echo = false, results = "hidden"
cohort_defs = collect(
    Iterators.product(visit_codes, condition_codes, gender_codes, race_codes, age_groups),
);
```

# Baseline Characterization

## Rough Question Around Bipolar Disorder

- Neuroscience bipolar studies limit age group to 18-35 
- Maybe look at age groups and limiting cohorts
- Maybe histograms and optimal age ranges

```julia, echo = false, results = "hidden"
idx = findall(def -> 
# Find by visit type
def[1] == inpatient_codes && 
# Find by condition type
def[2] == bipolar_df.CONCEPT_ID && 
# Find by gender
def[3] == nothing && 
# Find by race
def[4] == nothing && 
# Find by age group
def[5] == nothing, 
cohort_defs)
```

```julia, echo = false, results = "hidden"
cohort_def = cohort_defs[idx][1]
```

```julia, echo = false, results = "hidden"
cohort = GenerateCohorts(
    conn;
    visit_codes = cohort_def[1],
    condition_codes = cohort_def[2],
    gender_codes = cohort_def[3],
    race_codes = cohort_def[4],
    age_groupings = [cohort_def[5]],
)
```

```julia, echo = false, results = "hidden"
df = GenerateStudyPopulations(cohort_def[1][1], conn;by_gender = true, by_race = true, by_state = true)
```

```julia, echo = false, results = "hidden"
```

# Appendix

## Packages Used in Analysis

Package descriptions:

- [`CairoMakie`](https://github.com/JuliaPlots/Makie.jl/tree/master/CairoMakie) - Backend for Makie to produce static vector graphics at publication quality

- [`CSV`](https://github.com/JuliaData/CSV.jl) - Julia's multi-threaded CSV reader

- [`DataFrames`](https://github.com/JuliaData/DataFrames.jl) - Julia's dataframe handler for easily manipulating data

- [`DataSkimmer`](https://github.com/Hasnep/DataSkimmer.jl) - A Julia package that summarises tabular data in the REPL

- [`DrWatson`](https://github.com/JuliaDynamics/DrWatson.jl) - Incredibly helpful tool for managing Julia-based scientific experiments and exploration

- [`Formatting`](https://github.com/JuliaIO/Formatting.jl) - A Julia package to provide Python-like formatting support

- [`Makie`](https://github.com/JuliaPlots/Makie.jl) - Data visualization ecosystem for the Julia programming language, with high performance and extensibility

- [`PrettyTables`](https://github.com/ronisbr/PrettyTables.jl) - Print data in formatted tables

- [`Statistics`](https://github.com/JuliaLang/Statistics.jl) - Julia's standard library for useful statistical methods

